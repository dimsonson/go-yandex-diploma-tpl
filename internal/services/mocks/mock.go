// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dimsonson/go-yandex-diploma-tpl/internal/services (interfaces: StorageProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/dimsonson/go-yandex-diploma-tpl/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorageProvider is a mock of StorageProvider interface.
type MockStorageProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProviderMockRecorder
}

// MockStorageProviderMockRecorder is the mock recorder for MockStorageProvider.
type MockStorageProviderMockRecorder struct {
	mock *MockStorageProvider
}

// NewMockStorageProvider creates a new mock instance.
func NewMockStorageProvider(ctrl *gomock.Controller) *MockStorageProvider {
	mock := &MockStorageProvider{ctrl: ctrl}
	mock.recorder = &MockStorageProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProvider) EXPECT() *MockStorageProviderMockRecorder {
	return m.recorder
}

// StorageAuthorizationCheck mocks base method.
func (m *MockStorageProvider) StorageAuthorizationCheck(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageAuthorizationCheck", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorageAuthorizationCheck indicates an expected call of StorageAuthorizationCheck.
func (mr *MockStorageProviderMockRecorder) StorageAuthorizationCheck(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageAuthorizationCheck", reflect.TypeOf((*MockStorageProvider)(nil).StorageAuthorizationCheck), arg0, arg1, arg2)
}

// StorageConnectionClose mocks base method.
func (m *MockStorageProvider) StorageConnectionClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StorageConnectionClose")
}

// StorageConnectionClose indicates an expected call of StorageConnectionClose.
func (mr *MockStorageProviderMockRecorder) StorageConnectionClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageConnectionClose", reflect.TypeOf((*MockStorageProvider)(nil).StorageConnectionClose))
}

// StorageCreateNewUser mocks base method.
func (m *MockStorageProvider) StorageCreateNewUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageCreateNewUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorageCreateNewUser indicates an expected call of StorageCreateNewUser.
func (mr *MockStorageProviderMockRecorder) StorageCreateNewUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageCreateNewUser", reflect.TypeOf((*MockStorageProvider)(nil).StorageCreateNewUser), arg0, arg1, arg2)
}

// StorageGetOrdersList mocks base method.
func (m *MockStorageProvider) StorageGetOrdersList(arg0 context.Context, arg1 string) ([]models.OrdersList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageGetOrdersList", arg0, arg1)
	ret0, _ := ret[0].([]models.OrdersList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageGetOrdersList indicates an expected call of StorageGetOrdersList.
func (mr *MockStorageProviderMockRecorder) StorageGetOrdersList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageGetOrdersList", reflect.TypeOf((*MockStorageProvider)(nil).StorageGetOrdersList), arg0, arg1)
}

// StorageGetUserBalance mocks base method.
func (m *MockStorageProvider) StorageGetUserBalance(arg0 context.Context, arg1 string) (models.LoginBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageGetUserBalance", arg0, arg1)
	ret0, _ := ret[0].(models.LoginBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageGetUserBalance indicates an expected call of StorageGetUserBalance.
func (mr *MockStorageProviderMockRecorder) StorageGetUserBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageGetUserBalance", reflect.TypeOf((*MockStorageProvider)(nil).StorageGetUserBalance), arg0, arg1)
}

// StorageGetWithdrawalsList mocks base method.
func (m *MockStorageProvider) StorageGetWithdrawalsList(arg0 context.Context, arg1 string) ([]models.WithdrawalsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageGetWithdrawalsList", arg0, arg1)
	ret0, _ := ret[0].([]models.WithdrawalsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageGetWithdrawalsList indicates an expected call of StorageGetWithdrawalsList.
func (mr *MockStorageProviderMockRecorder) StorageGetWithdrawalsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageGetWithdrawalsList", reflect.TypeOf((*MockStorageProvider)(nil).StorageGetWithdrawalsList), arg0, arg1)
}

// StorageNewOrderLoad mocks base method.
func (m *MockStorageProvider) StorageNewOrderLoad(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageNewOrderLoad", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorageNewOrderLoad indicates an expected call of StorageNewOrderLoad.
func (mr *MockStorageProviderMockRecorder) StorageNewOrderLoad(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageNewOrderLoad", reflect.TypeOf((*MockStorageProvider)(nil).StorageNewOrderLoad), arg0, arg1, arg2)
}

// StorageNewOrderUpdate mocks base method.
func (m *MockStorageProvider) StorageNewOrderUpdate(arg0 context.Context, arg1 string, arg2 models.OrderSatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageNewOrderUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorageNewOrderUpdate indicates an expected call of StorageNewOrderUpdate.
func (mr *MockStorageProviderMockRecorder) StorageNewOrderUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageNewOrderUpdate", reflect.TypeOf((*MockStorageProvider)(nil).StorageNewOrderUpdate), arg0, arg1, arg2)
}

// StorageNewWithdrawal mocks base method.
func (m *MockStorageProvider) StorageNewWithdrawal(arg0 context.Context, arg1 string, arg2 models.NewWithdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageNewWithdrawal", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorageNewWithdrawal indicates an expected call of StorageNewWithdrawal.
func (mr *MockStorageProviderMockRecorder) StorageNewWithdrawal(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageNewWithdrawal", reflect.TypeOf((*MockStorageProvider)(nil).StorageNewWithdrawal), arg0, arg1, arg2)
}
