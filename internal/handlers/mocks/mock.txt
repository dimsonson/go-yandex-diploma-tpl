// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dimsonson/go-yandex-diploma-tpl/internal/handlers (interfaces: Services)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/dimsonson/go-yandex-diploma-tpl/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// ServiceAuthorizationCheck mocks base method.
func (m *MockServices) ServiceAuthorizationCheck(arg0 context.Context, arg1 models.DecodeLoginPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAuthorizationCheck", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceAuthorizationCheck indicates an expected call of ServiceAuthorizationCheck.
func (mr *MockServicesMockRecorder) ServiceAuthorizationCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAuthorizationCheck", reflect.TypeOf((*MockServices)(nil).ServiceAuthorizationCheck), arg0, arg1)
}

// ServiceCreateNewUser mocks base method.
func (m *MockServices) ServiceCreateNewUser(arg0 context.Context, arg1 models.DecodeLoginPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceCreateNewUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceCreateNewUser indicates an expected call of ServiceCreateNewUser.
func (mr *MockServicesMockRecorder) ServiceCreateNewUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCreateNewUser", reflect.TypeOf((*MockServices)(nil).ServiceCreateNewUser), arg0, arg1)
}

// ServiceGetOrdersList mocks base method.
func (m *MockServices) ServiceGetOrdersList(arg0 context.Context, arg1 string) ([]models.OrdersList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceGetOrdersList", arg0, arg1)
	ret0, _ := ret[0].([]models.OrdersList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceGetOrdersList indicates an expected call of ServiceGetOrdersList.
func (mr *MockServicesMockRecorder) ServiceGetOrdersList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceGetOrdersList", reflect.TypeOf((*MockServices)(nil).ServiceGetOrdersList), arg0, arg1)
}

// ServiceGetUserBalance mocks base method.
func (m *MockServices) ServiceGetUserBalance(arg0 context.Context, arg1 string) (models.LoginBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceGetUserBalance", arg0, arg1)
	ret0, _ := ret[0].(models.LoginBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceGetUserBalance indicates an expected call of ServiceGetUserBalance.
func (mr *MockServicesMockRecorder) ServiceGetUserBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceGetUserBalance", reflect.TypeOf((*MockServices)(nil).ServiceGetUserBalance), arg0, arg1)
}

// ServiceGetWithdrawalsList mocks base method.
func (m *MockServices) ServiceGetWithdrawalsList(arg0 context.Context, arg1 string) ([]models.WithdrawalsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceGetWithdrawalsList", arg0, arg1)
	ret0, _ := ret[0].([]models.WithdrawalsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceGetWithdrawalsList indicates an expected call of ServiceGetWithdrawalsList.
func (mr *MockServicesMockRecorder) ServiceGetWithdrawalsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceGetWithdrawalsList", reflect.TypeOf((*MockServices)(nil).ServiceGetWithdrawalsList), arg0, arg1)
}

// ServiceNewOrderLoad mocks base method.
func (m *MockServices) ServiceNewOrderLoad(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceNewOrderLoad", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceNewOrderLoad indicates an expected call of ServiceNewOrderLoad.
func (mr *MockServicesMockRecorder) ServiceNewOrderLoad(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceNewOrderLoad", reflect.TypeOf((*MockServices)(nil).ServiceNewOrderLoad), arg0, arg1, arg2)
}

// ServiceNewWithdrawal mocks base method.
func (m *MockServices) ServiceNewWithdrawal(arg0 context.Context, arg1 string, arg2 models.NewWithdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceNewWithdrawal", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceNewWithdrawal indicates an expected call of ServiceNewWithdrawal.
func (mr *MockServicesMockRecorder) ServiceNewWithdrawal(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceNewWithdrawal", reflect.TypeOf((*MockServices)(nil).ServiceNewWithdrawal), arg0, arg1, arg2)
}
